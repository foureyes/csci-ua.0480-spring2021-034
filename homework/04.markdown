---
layout: homework
title: CSCI-UA.0480 - Homework #4
---

<style>
h1.warning {
	background-color: #eaa;
}
</style>
<div class="panel panel-default">
	<div class="panel-heading">Homework #4</div>
	<div class="panel-body" markdown="block">

# URL Shortener Due 3/4 at 11pm

## Overview

### Description

Create a URL Shortener site that allows you to create shorter aliases for long URLs. Users are redirected to the original URL when they hit these short links.

For example, if we shorten the following URL:

> [https://cs.nyu.edu/courses/spring21/CSCI-UA.0480-034/_site/syllabus.html](https://cs.nyu.edu/courses/spring21/CSCI-UA.0480-034/_site/syllabus.html)

We would get:

> [http://localhost/xy8zcd](http://localhost/xy8zcd)

If you have never used an URL Shortener before, if would be a good idea to familiarize yourself with one of the following URL Shortener websites [bitly](https://bitly.com/) or [tinyurl](https://tinyurl.com/) . We will be building a web application similar to these.

In this homework you'll be working with:

* Serving static files
* Middleware
* Handling forms, both GET and POST
* Templating

You'll be creating 3 pages:

* __home__ - <code>/</code>: home page that displays a list of top 5 trending URLs. 
* __shorten__ - <code>/shorten</code>:  `shorten` page allows the user to shorten a long URL.
* __expand__ - <code>/expand</code>:  `expand` page allows the user to convert  a short URL back to the original long URL.

Your directory layout should look something like the following __once you're done with the assignment__:

<pre><code data-trim contenteditable>
├── app.js
├── data
│   ├── urldata.json
├── package-lock.json
├── package.json
├── public
│   ├── css
│   │   └── main.css
│   └── img
│       └── logo.png
├── urlShortener.js
└── views
    ├── expand.hbs
    └── shorten.hbs
    └── trending.hbs
    └── layout.hbs
</code></pre>

In the __view__ directory, you are not required to have the same files as above. But try to make redundant code as less as possible.

The focus of this homework is the implementation of URL Shortener using GET and POST forms. Fancy styling is not required.

### Example Interaction

<div markdown="block" class="img">
<!--![interaction](../resources/img/homework04.gif)-->
<img src="homework04.gif">

</div>

### Submission Process

1. You will be given access to a private repository on GitHub
2. The final version of your assignment should be in GitHub
3. __Push__ your changes to the homework repository on GitHub by the due date.

### (4 points) Make at Least 4 Commits
* Commit multiple times throughout your development process.
* Make at least 4 separate commits - (for example, one option may be to make one commit per part in the homework).

## Part 1 - Setup

###  Installing Dependencies

* create a <code>package.json</code>
* __install__ the following __dependencies__ (make sure you use the <code>--save</code> option), and __no others__:
	* <code>express</code>
	* <code>hbs</code>
    * <code>body-parser</code>


###  .gitignore

* create a <code>.gitignore</code>
* ignore the following files:
	* <code>node_modules</code>
	* any other files that aren't relevant to the project... for example
        * <code>.DS_Store</code> if you're on OSX
        * <code>.swp</code> if you use vim as your editor
        * etc.

### linting

* an eslint configuration file (for example `.eslintrc.json`) should be in the root directory (or copy one from a previous project if it doesn't exist)
* make sure that any global linting tools are installed (`eslint`)
* periodically lint your program as you work

## Part 2 - URL Shortener

### Overview

In this homework, you'll create an Express application that will allow an user to shorten URLs, expand URLs, get click counts for the URL. Users send HTTP GET and POST requests through the forms to a server. 

This part contains four major components.
1. Serving static files
2. Express Server
3. URL Shortener
4. Templating

###  Serving Static Files

First, we would like to make sure that we can serve static content on our site - like css and images. So let's get started.

* create the following directory / folder structure in your project's root directory
	* <code>public</code>
	* <code>public/css</code>
	* <code>public/img</code>
* add a blank css file in <code>public/css/main.css</code>
* add any image that you want to use as the long in <code>public/img/header.png</code>. There is no need to design your own logo. You can use any royalty free photo.
* create a basic express skeleton application in <code>app.js</code>
	* make sure that your application is __served over port 300
	* __after calling `app.listen(3000)`__
		* print out "Server started; type CTRL+C to shut down " to the console (the terminal window)
		* this will give you feedback that your server has started correctly 
* just add the appropriate requires (express, path, etc.) and middleware to enable static file serving:
	* refer to class slides for reminders / snippets on how to do this
* test that both the css files and image work
	* for example, try to go to <code>http://localhost:3000/img/logo.png</code> in your browser
	* -> your image should be displayed in browser

###  Creating a Home Page

Now that we can serve static files including our css file to make pages pretty, lets create a 'main' homepage for our site.

The home page consists of 3 sections. The first section displays the Top 5 Trending URLs. The other 2 sections contain 2 forms respectively. First form has text box with the label "Enter a long URL to shorten" and a corresponding button with the label "Shorten URL" that a user can click to shorten the long URL. Second form has a text box with the label "Enter a short URL to expand" and a corresponding button with the label "Expand URL" that a user can click to expand the short URL.

* for the home page, your app should accept <code>GET</code> requests on the path, <code>/</code>
* we will be using handlebars as our templating engine, so do the required steps to set that up
	* get all the requirements and config setup
	* create the appropriate views folder, along with an initial layout file:
		* <code>views</code>
        * <code>views/layout.hbs</code>
* in your <code>layout.hbs</code>, add the html
* recall that this surrounding html will go on every page
	* add a reference to include your <code>main.css</code> stylesheet (so that each other <code>.hbs</code> page has it too)
	* include a header containing both your <code>header.png</code> image and the title of your site, __URL Shortener__
    * additionally, add a 'nav bar' consisting of 3 links that will let you navigate across the 3 pages in your site:
	     * a link to __a page that displays trending URLs__ (<code> / </code>)  - This is the home page.
	    * a link to __a page that lets us shorten a URL__  (<code> /shorten </code>)
	    * a link to __a page that lets us expand a URL__  (<code> /expand </code>)
	   
	    
	* **Important** - don't forget <code>body</code>, surrounded by triple curly braces, or else other templates are not going to get rendered
	
* now that you have the layout, add your home page template (it's up to you how you call it)
    * add an <code>h2</code> element that says `Trending URLs` to this template
    * you will add more html and templating to this file later
* set up a route and a <code> render </code> call so that going to the root url via a <code>GET</code> request shows the rendered template
* add some css to change the styles on the page. Some examples / inspiration (you can totally show your creativity here):
    * change the font
    * change the background color
    * change the font color
    * add padding, center alignment
    * etc.


Here's an example of what the page could look like (you don't have to use the same exact styles, but add enough styles so that you can see that the style sheet is correctly served and applied to the html):

<img src="trending.png" alt="styled page" width="100%">

If you add stuff to your css file but no styles change, check the console for errors and the html in <code> layout.hbs </code> to make sure the path to the css file is correct.

## Part 3 - Middleware, Templating and Routing

### Middleware
In order to help us debug our code on backend during development, let's set up some initial logging in form of middleware. We want to log __for each request__:

* The method (GET, POST)
* The route
* The query string

First, activate the body parsing middleware (`express.urlencoded`) by passing it to `app.use`; this will allow you to access the content of the request's body.

Additionally, create a custom middleware function and <code>app.use</code> it in <code>app.js</code>. Hint: don't forget to call <code>next()</code>, also to print objects, you'll need JSON.stringify.

Again, this function __has to__ print

* the request's __method__,  __path__, and request's __query string__
* Example:
    * Method: GET 
    * Path: /
    * {}

### Templating

In this homework, you'll work with HTML and templating to build your front-end. You'll also use the context passed from the server to render partial templates. You don't have to implement the interface exactly the same as examples provided (styling is not strictly required). But basic pages for a functional system are required.

* Set up handlebars - [these slides](../slides/09/templating.html) 
	* Get all the requirements and config setup
	* Create the appropriate views folder, along with an initial layout file:
		* <code>views</code>
        * <code>views/layout.hbs</code>

In <code>layout.hbs</code>

* Create a title tag with text <code>URL Shortener</code> or display a logo image from the `/img` folder.
	* UPDATE 3/2: although a `title` tag and an `img` are different elements and displayed differently (`title` in the tab, and image or header in the page), either will be fine... basically, just make sure there are shared elements through `layout.hbs`
* Create appropriate tags inside <code>head</code>
* Create <code>body</code> tag
* Link your <code>style.css</code> stylesheet

### Routes

<code>POST</code> requests:

* <code>/shorten</code>: Given a original long URL, returns a short URL.
    * Receive a parameter <code>originalUrl</code>
    * Parse <code>shortURL</code> appropriately, call <code>shorten</code> method defined in <code>URLShortener</code> object
    * Render an appropriate HTML page with the short URL and pass a context containing the information retrieve from the URLShortener class.


<code>GET</code> requests:

* <code>/shorten</code>: Render the form which the user can submit to shorten a URL. 
    * Render an appropriate HTML page with the short URL and pass a context containing the information retrieve from the URLShortener class.

* <code>/expand</code>: Render the form which the user can submit to expand a URL or given a short URL, returns the original long URL.
    * Receives a parameter <code>shortUrl</code> when the form is submitted else No parameter.
    * When the form is submitted, parse <code>shortURL</code> appropriately, call <code>expand</code> method defined in <code>URLShortener</code> and render an appropriate HTML page with the long URL and pass a context containing the information retrieve from the URLShortener class. Otherwise, Render the form which the user can submit to expand a URL
   
* <code>/</code> or <code>/trending</code>
     * No parameters
    * Render an appropriate HTML page with a list of top 5 trending URLs.

## Part 4 -  Initial data

The initial data for the site should be stored as an `Array` of `urlShortener` objects. This can simply be a global variable in your `app.js` file.

The `urlShortener` objects should be created by reading the file `urldata.json` located in the `data` directory. 

The format of the `urldata.json`  file in the `data` folder is as follows:

* It is a JSON file with an array of `urlShortener` objects.
* Each of the `urlShortener` objects have three key-value pairs - `shortURL`, `originalURL`, `clickCount`.
   
The general requirements for this part are:

* read the data from the `urldata.json`  file
	* UPDATE 3/2:
		* ⚠️ `urldata.json` contains an _invisible_ [BOM](https://en.wikipedia.org/wiki/Byte_order_mark) character at the beginning of the file that prevents JSON parsing; please copy over to new file and overwrite existing (or use vim's `:set nobomb` and save... or open and resave with your editor of choice)
		* prefer `readFile` to do this despite using sync making more sense (we want to practice callback based management of async io)
* save the array of `urlShortener` objects in a global variable. We will refer to this global variable as `urlData` in the rest of this assignment.
* once everything is read, print out the global variable `urlData`. 

Your output should look like the following:

```
[ 
	{ 
	originalURL: 'http://www.bearconservation.org.uk/wp-content/uploads/2017/08/Kodiak_brown_bear_FWS_18383.jpg', 
	shortURL: 'http://localhost:3000/sdf78g', 
	clickCount: '3' 
	},
   {
    originalURL: 'http://www.bearconservation.org.uk/wp-content/uploads/2017/08/Kodiak_brown_bear_FWS_18383.jpg',
    shortURL: 'http://localhost:3000/sff78g',
    clickCount: '150' 
    }
]
```

* modify `app.js` so that `listen` is called and the "Server started" message is printed __after__ all of the files are read

## Part 5 - URL Shortener Class

In `urlShortener.js`, create a class that represents a URL Shortener. The main logic to shorten the URL should be included in this class. Your class should behave as follows: (UPDATE 3/2: ⚠️ you can create your own class design, so you can treat this as recommended behavior)

```
// the constructor accepts the original long URL
// You would create an object of the URLShortener class as follows

const urlShortenerObject = new URLShortener(
  'http://www.bearconservation.org.uk/wp-content/uploads/2017/08/Kodiak_brown_bear_FWS_18383.jpg'
)

// An object of URLShortener class has the following properties and methods:

console.log(urlShortenerObject.originalURL);  // http://www.bearconservation.org.uk/wp-content/uploads/2017/08/Kodiak_brown_bear_FWS_18383.jpg
console.log(urlShortenerObject.shortURL);  // http://localhost:3000/sdf56g
console.log(urlShortenerObject.clickCount);  // 450
```

⚠️ Export the `URLShortener` class you make and bring it into `app.js` so that your web app can create `URLShortener` instances!

Following class is an example to implement the `URLShortener`. You are not required to follow this class definition.
(UPDATE 3/2: ⚠️  again, you can create your own class design, so you can treat this as recommended behavior... additionally, minor changes to signatures)


```javascript=
class URLShortener {
    constructor (originalURL) {
        this.originalURL = originalURL;
        this.clickCount = 0;
    }

	// Returns Short URL
    shorten() {
    }

	// Returns Expanded URL
    expand() {
    }

	// Updates Click count
    updateClickCount() {
    }
}
```

We will write the logic to shorten the URL in the next part. Please feel free to create your own class definition. Your website must provide the functionality discussed in the other parts of this Homework.

## Part 6 - Shortening a URL

### Form

We haven't yet implemented the main feature of our web application, which is to shorten the URL. Let's implement this feature.

* Write the logic to shorten a long URL in `shorten()` method of the `URLShortener` class. The shortened URL should have the following components:
	* Protocol: http or https
	* Domain: Here, we are using localhost. So, localhost:3000
	* UniqueString: This should be 6 characters long and Contain only the lowercase alphabets, uppercase alphabets and integers.
	Format: `Protocol://Domain/UniqueString`
	For example, a valid short URL is `http://localhost:3000/sdf65x`
	
	**Extra Credit(5 points):** What if a short URL that the `shorten()` method generates already exists in the global variable `urlData`. This will cause conflict issues when you expand the short URL to a long URL. Handle this conflict to earn extra credit!

* create a new route handler in __app.js__ for <code>/shorten</code>

* create a new handlebars template and add a call to <code>render</code> inside of the new route handler that renders the new template
    * add a form to the template with an <code>input</code> and a submit button - this is how we'll shorten an URL
    * input text field accepts the original long URL
    * __Extra credit(2 points)__: validate the URL!
   
* __the form's method should be a <code>POST</code>__

* the action of the form should be <code>/shorten</code> since we make the request to the same page (/shorten)

* now that we have a new form making a <code>POST</code> request, add a new route handler in __app.js__ to accept <code>POST</code> requests on the URL of <code>/shorten</code>

	* inside this handler: 
	    1. you can check properties by printing out the `req` object.
	    2. create a new 	`URLShortener` object for this new URL
	    3. shorten the URL by calling the shorten method in the `URLShortener` class.
	    4. add the new object to the global array holding all of the shortURLs. 
	    5. __Important__: We also want to create an entry to our JSON file  `urldata.json` so that next time we restart the app, we have the updated data . 
	    6. display the short URL to the user.


## Part 7 - Expand URL

Now that we have created a short URL, let us add a form for the user to get the original long URL using the short URL. 

* __In a new__ template, add a form to expand the short URL. 
	* add attributes to the form tag so that submitting the form makes a request to the same path that the form page is on
	* the form uses the appropriate HTTP request method for the functionality of this form (it should be `GET` since it's just reading data!)
* The form should have an `input` element for entering the short URL and a Submit button with the label `Expand URL`.
* Remember that the name of the input element shows up somewhere in the HTTP request and in properties of the express application's request object.
* Use the `updateClickCount` method of the `URLShortener` class to increment the value of `clickCount` property of the current `URLShortener` object by 1. 
    
__Now, onto the server side:__

Add a route handler for the expand page (e.g. <code>/expand</code>) to __only__ choose the long URL that matches the short URL and send it to the <code>render</code> call


## Part 8 - Displaying the trending URLs

So far our homepage is very boring and doesn't show anything, so lets make it display the top 5 trending URLs. 

Let us display trending URLs in a list format. 


### Page to display the trending URLs

* Filter for the top 5 trending URLs. Trending URLs are the URLs with highest count. Use the `clickCount` property from `URLShortener` class to get the Click Count of each URL. 
* pass in your trendingURLs data (in an array) to the <code> render</code> call in the route handler for the homepage so that our template has access to it
* add html to display the trending URL data in an organized way
    * HINT: can iterate through the list of urlShortener objects using the <code>#each</code> helper
    * HINT: can put each trendingURL data in a list item (<code>li</code>)

* NOTE: Some of the higher order functions we used in Homework 2 will be useful here!

__Reload and visually check.__

* Page should display top 5 trending URLs along in a list-like way
* Styling does not have to be exact.


</div>

</div>
